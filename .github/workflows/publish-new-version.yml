name: Build, Test and Publish
run-name: ${{ github.workflow }} (${{ github.head_ref || github.ref_name }})

on:
  workflow_dispatch:
    inputs:
      vault_version:
        description: 'Vault version'
        required: true
      bump-typeorm-encryption:
        description: |-
          How to bump `@piiano/typeorm-encryption` version:
          - `none` - do not bump version and do not publish
          - `patch` - bump patch version
          - `minor` - bump minor version
          - `major` - bump major version
          If not specified, check if there are any changes in `sdk/typeorm-encryption`.
          - If nothing changed, do not bump version and do not publish.
          - If there are changes, bump patch version and publish.
        required: false
        type: choice
        options:
          - none
          - patch
          - minor
          - major
      bump-vault-client:
        description: |-
          How to bump `@piiano/vault-client` version:
          - `none` - do not bump version and do not publish
          - `patch` - bump patch version
          - `minor` - bump minor version
          - `major` - bump major version
          If not specified, check if there are any changes in `sdk/vault-client`.
          - If nothing changed, do not bump version and do not publish.
          - If there are changes, bump patch version and publish.
        required: false
        type: choice
        options:
          - none
          - patch
          - minor
          - major
      bump-testcontainers-vault:
        description: |-
          How to bump `@piiano/testcontainers-vault` version:
          - `none` - do not bump version and do not publish
          - `patch` - bump patch version
          - `minor` - bump minor version
          - `major` - bump major version
          If not specified, check if there are any changes in `sdk/testcontainers-vault`.
          - If nothing changed, do not bump version and do not publish.
          - If there are changes, bump patch version and publish.
        required: false
        type: choice
        options:
          - none
          - patch
          - minor
          - major

jobs:
  bump-versions:
    name: Bump versions
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        env:
          PACKAGES: >-
            [
              {"name": "testcontainers-vault", "bump": ${{ inputs.bump-testcontainers-vault }} },
              {"name": "vault-client", "bump": ${{ inputs.bump-vault-client }} },
              {"name": "typeorm-encryption", "bump": ${{ inputs.bump-typeorm-encryption }} }
            ]

        run: |
          
          # bump versions of packages
          echo $PACKAGES | \
            jq -r '.[] | select(.bump != "none") | "--cwd sdk/"+.name+" version --no-git-tag-version --no-commit-hooks --"+.bump' | \
            xargs -L1 yarn
          
          # list new versions of packages
          echo $PACKAGES | jq -r '"./sdk/"+.[].name+"/package.json"' | xargs -L1 -I{} jq -r '.version' {}
          
          jq '(.dependencies + .devDependencies + .peerDependencies)["@piiano/testcontainers-vault"] != null' ./sdk/vault-client/package.json
          
          echo $PACKAGES | jq -r 'map("./sdk/"+.+"/package.json")[]' | xargs jq --slurp -n '[inputs[] | {key: .name, value: .version} ] | from_entries'
          
          '
            jq '(.dependencies + .devDependencies + .peerDependencies)["@piiano/testcontainers-vault"] != null' ./sdk/vault-client/package.json
          
          yarn --cwd packages/typeorm-encryption version --no-git-tag-version --no-commit-hooks --${{ github.event.inputs.typeorm-encryption-version }}
          yarn --cwd packages/vault-client version --no-git-tag-version --no-commit-hooks --${{ github.event.inputs.vault-client-version }}
          yarn --cwd packages/testcontainers-vault version --no-git-tag-version --no-commit-hooks --${{ github.event.inputs.testcontainers-vault-version }}

      - run: Bump versions
      - run: Check where packages are used and bump versions there
      - run: Run build and test

      - run: Update README.md

      - name: Update README.md
        run: |

      - name: Commit changes
        run: |

  build-test-publish:
    name: Build, Test & Publish ${{ matrix.package }}
    uses: ./.github/workflows/build-test-publish-package.yml
    with:
      path: ${{ matrix.package }}
      publish: ${{ github.ref_name == 'main' }}



#    steps:
##      - name: Checkout
#        uses: actions/checkout@v3
#        with:
#          fetch-depth: "0"
#
#      - name: Check for changes
#        id: package
#        run: |
#          echo "changed=$(git diff --quiet HEAD^ -- ${{ matrix.package }} && echo 'false' || echo 'true')" >> $GITHUB_OUTPUT
#          echo "main_version=$(git show main:${{ matrix.package }}/package.json | jq -r '.version')" >> $GITHUB_OUTPUT
#          echo "branch_version=$(jq -r .version ${{ matrix.package }}/package.json)" >> $GITHUB_OUTPUT
#          echo "name=$(jq -r .name ${{ matrix.package }}/package.json)" >> $GITHUB_OUTPUT
#
#      - name: Check version
#        if: >-
#          github.ref != 'refs/heads/main' &&
#          steps.package.outputs.changed == 'true' &&
#          steps.package.outputs.main_version == steps.package.outputs.branch_version
#        run: |
#          yarn --cwd ${{ matrix.package }} version \
#            --no-git-tag-version \
#            --no-commit-hooks \
#            --patch
#
#          NEW_VERSION=$(jq -r .version ${{ matrix.package }}/package.json)
#          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
#
#          git config --global user.email "cicd@piiano.com"
#          git config --global user.name "Github Actions"
#
#          git add ${{ matrix.package }}/package.json
#          git commit -m "bump ${{ steps.package.outputs.name }} version ${{ steps.package.outputs.version }} => $VERSION"
#          git push
#
#          echo "## Workflow failure" >> $GITHUB_STEP_SUMMARY
#          echo "Package `${{ steps.package.outputs.name }}` changed but version was not bumped." >> $GITHUB_STEP_SUMMARY
#          echo "CI bumped version from `${{ steps.package.outputs.version }}` to `$VERSION`" >> $GITHUB_STEP_SUMMARY
#          echo "This workflow is terminated and will be re-run by push of the version bump." >> $GITHUB_STEP_SUMMARY
#
#          exit 1
#
#      - uses: actions/setup-node@v3
#        if: steps.package.outputs.changed == 'true'
#        with:
#          node-version: 16
#          cache: 'yarn'
#          cache-dependency-path: ${{ matrix.package }}/yarn.lock
#
#      - name: Install dependencies
#        if: steps.package.outputs.changed == 'true'
#        run: yarn --cwd ${{ matrix.package }} --frozen-lockfile
#
#      - name: Run build
#        if: steps.package.outputs.changed == 'true'
#        run: yarn --cwd ${{ matrix.package }} build
#
#      - name: Run tests
#        if: steps.package.outputs.changed == 'true'
#        run: yarn --cwd ${{ matrix.package }} test
#        env:
#          PVAULT_SERVICE_LICENSE: ${{ secrets.PVAULT_SERVICE_LICENSE }}
#
#      - name: Publish @piiano/${{ steps.package.outputs.name }}:${{ steps.bump-version.outputs.new_version }}
#        if: steps.package.outputs.changed == 'true' && github.ref == 'refs/heads/main'
#        run: |
#          cat <<EOF >.npmrc
#          //registry.npmjs.org/:_authToken=${{ secrets.NPM_REGISTRY_TOKEN }}
#          EOF
#
#          yarn --cwd ${{ matrix.package }} publish --access=public
