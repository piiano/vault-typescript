name: Build, Test and Publish
run-name: ${{ github.workflow }} (${{ github.head_ref || github.ref_name }})

on:
  push:
    branches-ignore:
      - dependabot/**
  workflow_dispatch:
    inputs:
      vault-version:
        description: 'Vault version'
        required: true
      bump-testcontainers-vault:
        description: Bump `@piiano/testcontainers-vault` version
        required: false
        default: none
        type: choice
        options: [none, patch, minor, major]
      bump-vault-client:
        description: Bump `@piiano/vault-client` version
        required: false
        default: patch
        type: choice
        options: [none, patch, minor, major]
      bump-typeorm-encryption:
        description: Bump `@piiano/typeorm-encryption` version
        required: false
        default: patch
        type: choice
        options: [none, patch, minor, major]

jobs:
  update-readme:
    name: Update README
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: "0"

      - name: Update README to reference Vault version ${{ inputs.vault-version }}
        env:
          LINE: This package is compatible with Vault version
        run: sed -i '' -E "s|$LINE [0-9]+\.[0-9]+\.[0-9]+\.|$LINE ${{ inputs.vault-version }}.|g" $(git ls-files **/README.md)

      - name: Commit and push changes
        run: |
          # TODO: commit and push changes           
          git status

  build-test-publish:
    needs:
      - update-readme
    if: always() && (needs.update-readme.result == 'success' || needs.update-readme.result == 'skipped')
    name: @piiano/${{ matrix.package }}
    uses: ./.github/workflows/build-test-publish-package.yml
    strategy:
      matrix:
        package:
          - testcontainers-vault
          - vault-client
          - typeorm-encryption
      # we need to run jobs sequentially because of the way packages depend on each other
      max-parallel: 1
      fail-fast: true
    with:
      path: ./sdk/${{ matrix.package }}
      bump: >-
        ${{ 
          github.event_name == 'push' &&
          'none' ||
          inputs[format('bump-{0}', matrix.package)]
        }}
    secrets: inherit

#
#  bump-versions:
#    name: Bump versions
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v3
#        env:
#          PACKAGES: >-
#            [
#              {"name": "testcontainers-vault", "bump": ${{ inputs.bump-testcontainers-vault }} },
#              {"name": "vault-client", "bump": ${{ inputs.bump-vault-client }} },
#              {"name": "typeorm-encryption", "bump": ${{ inputs.bump-typeorm-encryption }} }
#            ]
#
#        run: |
#
#          # bump versions of packages
#          echo $PACKAGES | \
#            jq -r '.[] | \
#              select(.bump != "none") | \
#              "--cwd sdk/"+.name+" version --no-git-tag-version --no-commit-hooks --"+.bump' | \
#            xargs -L1 yarn

#          # update dependent packages
#          echo $PACKAGES | \
#            jq '"./sdk/"+.[].name+"/package.json"' | \
#            xargs jq -r --slurp '
#              [.[]] as $m | [$m[] | {
#                name: .name,
#                deps: [(.dependencies | keys | .-(.-[$m[].name]) | .[] as $d | { name: $d, version: [$m[] | select(.name == $d).version][0] })],
#                devDeps: [(.devDependencies | keys | .-(.-[$m[].name]) | .[] as $d | { name: $d, version: [$m[] | select(.name == $d).version][0] })]
#              }] |
#              (
#                [.[] | "\(.name) \(.deps[] | .name + "@" +.version)"] +
#                [.[] | "\(.name) -D \(.devDeps[] | .name + "@" +.version)"]
#              ) |
#              map("add --cwd ./sdk/"+.[8:])[]' | \
#            xargs -L1 yarn

#    steps:
##      - name: Checkout
#        uses: actions/checkout@v3
#        with:
#          fetch-depth: "0"
#
#      - name: Check for changes
#        id: package
#        run: |
#          echo "changed=$(git diff --quiet HEAD^ -- ${{ matrix.package }} && echo 'false' || echo 'true')" >> $GITHUB_OUTPUT
#          echo "main_version=$(git show main:${{ matrix.package }}/package.json | jq -r '.version')" >> $GITHUB_OUTPUT
#          echo "branch_version=$(jq -r .version ${{ matrix.package }}/package.json)" >> $GITHUB_OUTPUT
#          echo "name=$(jq -r .name ${{ matrix.package }}/package.json)" >> $GITHUB_OUTPUT
#
#      - name: Check version
#        if: >-
#          github.ref != 'refs/heads/main' &&
#          steps.package.outputs.changed == 'true' &&
#          steps.package.outputs.main_version == steps.package.outputs.branch_version
#        run: |
#          yarn --cwd ${{ matrix.package }} version \
#            --no-git-tag-version \
#            --no-commit-hooks \
#            --patch
#
#          NEW_VERSION=$(jq -r .version ${{ matrix.package }}/package.json)
#          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
#
#          git config --global user.email "cicd@piiano.com"
#          git config --global user.name "Github Actions"
#
#          git add ${{ matrix.package }}/package.json
#          git commit -m "bump ${{ steps.package.outputs.name }} version ${{ steps.package.outputs.version }} => $VERSION"
#          git push
#
#          echo "## Workflow failure" >> $GITHUB_STEP_SUMMARY
#          echo "Package `${{ steps.package.outputs.name }}` changed but version was not bumped." >> $GITHUB_STEP_SUMMARY
#          echo "CI bumped version from `${{ steps.package.outputs.version }}` to `$VERSION`" >> $GITHUB_STEP_SUMMARY
#          echo "This workflow is terminated and will be re-run by push of the version bump." >> $GITHUB_STEP_SUMMARY
#
#          exit 1
#
#      - uses: actions/setup-node@v3
#        if: steps.package.outputs.changed == 'true'
#        with:
#          node-version: 16
#          cache: 'yarn'
#          cache-dependency-path: ${{ matrix.package }}/yarn.lock
#
#      - name: Install dependencies
#        if: steps.package.outputs.changed == 'true'
#        run: yarn --cwd ${{ matrix.package }} --frozen-lockfile
#
#      - name: Run build
#        if: steps.package.outputs.changed == 'true'
#        run: yarn --cwd ${{ matrix.package }} build
#
#      - name: Run tests
#        if: steps.package.outputs.changed == 'true'
#        run: yarn --cwd ${{ matrix.package }} test
#        env:
#          PVAULT_SERVICE_LICENSE: ${{ secrets.PVAULT_SERVICE_LICENSE }}
#
#      - name: Publish @piiano/${{ steps.package.outputs.name }}:${{ steps.bump-version.outputs.new_version }}
#        if: steps.package.outputs.changed == 'true' && github.ref == 'refs/heads/main'
#        run: |
#          cat <<EOF >.npmrc
#          //registry.npmjs.org/:_authToken=${{ secrets.NPM_REGISTRY_TOKEN }}
#          EOF
#
#          yarn --cwd ${{ matrix.package }} publish --access=public
