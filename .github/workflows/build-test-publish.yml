name: Build, Test and Publish
run-name: ${{ github.workflow }} (${{ github.head_ref || github.ref_name }})

on:
  push:
    # Run for all branches excluding dependabot branches. Do NOT run for tags.
    branches-ignore:
      - "dependabot/**"
    # Do NOT run for changes version bumps to prevent infinite loops.
    paths-ignore:
      - "**/package.json"

jobs:
  list-packages:
    outputs:
      packages: ${{ steps.params.outputs.packages }}
    name: List packages
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set params
        id: params
        run: >
          PACKAGES=$(git ls-files |
            grep package.json |
            sed s,/package.json,, |
            jq -Rc --slurp 'split("\n")[:-1]')
          
          echo "packages=$(echo $PACKAGES)" >> $GITHUB_OUTPUT

      - name: Print packages
        run: |
          echo 'Params:'
          echo '${{ toJSON(steps.params.outputs) }}' | jq -C '.' | sed 's/^/|/g'

  build-test-publish:
    name: Build, Test & Publish ${{ matrix.package }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        package: ${{ fromJSON(needs.list-packages.outputs.packages) }}
      fail-fast: false
    needs:
      - list-packages
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: "0"

      - name: Check for changes
        id: package
        run: |
          echo "changed=$(git diff --quiet HEAD^ -- ${{ matrix.package }} && echo 'false' || echo 'true')" >> $GITHUB_OUTPUT
          echo "main_version=$(git show main:${{ matrix.package }}/package.json | jq -r '.version')" >> $GITHUB_OUTPUT
          echo "branch_version=$(jq -r .version ${{ matrix.package }}/package.json)" >> $GITHUB_OUTPUT
          echo "name=$(jq -r .name ${{ matrix.package }}/package.json)" >> $GITHUB_OUTPUT

      - name: Check version
        if: >-
          github.ref != 'refs/heads/main' &&
          steps.package.outputs.changed == 'true' &&
          steps.package.outputs.main_version == steps.package.outputs.branch_version
        run: |
          yarn --cwd ${{ matrix.package }} version \
            --no-git-tag-version \
            --no-commit-hooks \
            --patch
          
          NEW_VERSION=$(jq -r .version ${{ matrix.package }}/package.json)
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          
          git config --global user.email "cicd@piiano.com"
          git config --global user.name "Github Actions"
          
          git add ${{ matrix.package }}/package.json
          git commit -m "bump ${{ steps.package.outputs.name }} version ${{ steps.package.outputs.version }} => $VERSION"
          git push
          
          echo "## Workflow failure" >> $GITHUB_STEP_SUMMARY
          echo "Package `${{ steps.package.outputs.name }}` changed but version was not bumped." >> $GITHUB_STEP_SUMMARY
          echo "CI bumped version from `${{ steps.package.outputs.version }}` to `$VERSION`" >> $GITHUB_STEP_SUMMARY
          echo "This workflow is terminated and will be re-run by push of the version bump." >> $GITHUB_STEP_SUMMARY
          
          exit 1

      - uses: actions/setup-node@v3
        if: steps.package.outputs.changed == 'true'
        with:
          node-version: 16
          cache: 'yarn'
          cache-dependency-path: ${{ matrix.package }}/yarn.lock

      - name: Install dependencies
        if: steps.package.outputs.changed == 'true'
        run: yarn --cwd ${{ matrix.package }} --frozen-lockfile

      - name: Run build
        if: steps.package.outputs.changed == 'true'
        run: yarn --cwd ${{ matrix.package }} build

      - name: Run tests
        if: steps.package.outputs.changed == 'true'
        run: yarn --cwd ${{ matrix.package }} test
        env:
          PVAULT_SERVICE_LICENSE: ${{ secrets.PVAULT_SERVICE_LICENSE }}

      - name: Publish @piiano/${{ steps.package.outputs.name }}:${{ steps.bump-version.outputs.new_version }}
        if: steps.package.outputs.changed == 'true' && github.ref == 'refs/heads/main'
        run: |
          cat <<EOF >.npmrc
          //registry.npmjs.org/:_authToken=${{ secrets.NPM_REGISTRY_TOKEN }}
          EOF
          
          yarn --cwd ${{ matrix.package }} publish --access=public
