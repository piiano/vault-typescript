diff --git b/sdk/vault-client/src/generated/core/ApiError.ts a/sdk/vault-client/src/generated/core/ApiError.ts
index 41a9605..2778816 100644
--- b/sdk/vault-client/src/generated/core/ApiError.ts
+++ a/sdk/vault-client/src/generated/core/ApiError.ts
@@ -12,13 +12,43 @@ export class ApiError extends Error {
   public readonly request: ApiRequestOptions;
 
   constructor(request: ApiRequestOptions, response: ApiResult, message: string) {
-    super(message);
-
-    this.name = 'ApiError';
+    super(formatErrorMessage(message, response.body));
+    // Maintains proper stack trace for where our error was thrown (only available on V8)
+    if (Error.captureStackTrace) {
+      Error.captureStackTrace(this, ApiError);
+    }
+    this.name = ApiError.name;
     this.url = response.url;
     this.status = response.status;
     this.statusText = response.statusText;
     this.body = response.body;
     this.request = request;
+    // because we are extending a built-in class
+    Object.setPrototypeOf(this, ApiError.prototype);
   }
 }
+
+function formatErrorMessage(message: string, body: unknown): string {
+  if (!isVaultHTTPError(body)) {
+    return message;
+  }
+
+  const { error_code, message: vaultMessage, context } = body;
+
+  return `${message}
+${error_code}: ${vaultMessage}
+Context: ${JSON.stringify(context, null, 2)}`;
+}
+
+type VaultError = {
+  error_code: string;
+  message: string;
+  context: Record<string, string>;
+}
+
+function isVaultHTTPError(body: unknown): body is VaultError {
+  return typeof body === 'object' && body !== null &&
+    'error_code' in body && typeof body.error_code === 'string' &&
+    'message' in body && typeof body.message === 'string' &&
+    'context' in body && typeof body.context === 'object' && body.context !== null;
+}
